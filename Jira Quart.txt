import com.atlassian.jira.component.ComponentAccessor
import java.util.*
import com.atlassian.jira.issue.IssueFieldConstants
import com.atlassian.jira.issue.attachment.TemporaryWebAttachment
import com.atlassian.jira.issue.attachment.TemporaryWebAttachmentManager
import webwork.action.ActionContext
import org.apache.log4j.Category
import com.atlassian.jira.issue.Issue;

def issueService = ComponentAccessor.issueService
def projectManager = ComponentAccessor.projectManager
def user = ComponentAccessor.jiraAuthenticationContext.getLoggedInUser()

def issueInputParameters = issueService.newIssueInputParameters()

issueInputParameters.with{
    projectId = 10000
    summary = "Quarterly Test"
    issueTypeId = "10000"
    reporterId = user.name
    description = "Testing description"
}

def validationResult = issueService.validateCreate(user, issueInputParameters)
assert !validationResult.errorCollection.hasAnyErrors()

def issueResult = issueService.create(user, validationResult)
log.error(issueResult.issue)

// Get the current issue key
def issueManager = ComponentAccessor.getIssueManager()
def issue = issueManager.getIssueObject("TEST-36")

Issue issueKey = issue
def id = issueKey.getId()

log.error(issueKey)

// Get a manager to handle the copying of attachments
def attachmentManager = ComponentAccessor.getAttachmentManager()

// Get the default attachment path from its manager 
def attachmentPathManager = ComponentAccessor.getAttachmentPathManager().attachmentPath.toString()

// Get the current date
def today = new Date()

// Get the last attachments file properties needed by the attachment manager to copy it.

def fileName = issueKey.attachments.last()?.filename.toString()
def fileType = issueKey.attachments.last()?.mimetype.toString()

// Construct the key of the next Subtask
def currentIssue = issue.toString()

// Extract the project key from the issue
def projectKey = "TEST"

// Get the ID that jira has used to store the last attachment
def fileId = issueKey.attachments.last()?.id

// Construct the file path of the attachment to copy
def path = attachmentPathManager + "/" + projectKey + "/" + "10000" + "/" + currentIssue + "/" + fileId + "/"

// Construct a pointer to the file that will be copied
File filePath = new File(path.toString())

// Specify the issue to copy the attachment to here. This could be defined in code.
Issue subIssue = ComponentAccessor.getIssueManager().getIssueObject(issueResult.issue.toString())

log.error(fileName + fileType)

// If there is a previous attachment
if (fileName != null) {
// Attach the file to the new issue
    attachmentManager.createAttachmentCopySourceFile(filePath, fileName, fileType, user.name, subIssue, null, today)
}
